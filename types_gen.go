package golocator

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Country) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "Name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Iso3":
			z.Iso3, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Iso3")
				return
			}
		case "Iso2":
			z.Iso2, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Iso2")
				return
			}
		case "PhoneCode":
			z.PhoneCode, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "PhoneCode")
				return
			}
		case "Capital":
			z.Capital, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Capital")
				return
			}
		case "Currency":
			z.Currency, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Currency")
				return
			}
		case "States":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "States")
				return
			}
			if z.States == nil {
				z.States = make(map[string][]string, zb0002)
			} else if len(z.States) > 0 {
				for key := range z.States {
					delete(z.States, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 []string
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "States")
					return
				}
				var zb0003 uint32
				zb0003, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "States", za0001)
					return
				}
				if cap(za0002) >= int(zb0003) {
					za0002 = (za0002)[:zb0003]
				} else {
					za0002 = make([]string, zb0003)
				}
				for za0003 := range za0002 {
					za0002[za0003], err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "States", za0001, za0003)
						return
					}
				}
				z.States[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Country) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 8
	// write "ID"
	err = en.Append(0x88, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "Name"
	err = en.Append(0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "Iso3"
	err = en.Append(0xa4, 0x49, 0x73, 0x6f, 0x33)
	if err != nil {
		return
	}
	err = en.WriteString(z.Iso3)
	if err != nil {
		err = msgp.WrapError(err, "Iso3")
		return
	}
	// write "Iso2"
	err = en.Append(0xa4, 0x49, 0x73, 0x6f, 0x32)
	if err != nil {
		return
	}
	err = en.WriteString(z.Iso2)
	if err != nil {
		err = msgp.WrapError(err, "Iso2")
		return
	}
	// write "PhoneCode"
	err = en.Append(0xa9, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.PhoneCode)
	if err != nil {
		err = msgp.WrapError(err, "PhoneCode")
		return
	}
	// write "Capital"
	err = en.Append(0xa7, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.Capital)
	if err != nil {
		err = msgp.WrapError(err, "Capital")
		return
	}
	// write "Currency"
	err = en.Append(0xa8, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Currency)
	if err != nil {
		err = msgp.WrapError(err, "Currency")
		return
	}
	// write "States"
	err = en.Append(0xa6, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.States)))
	if err != nil {
		err = msgp.WrapError(err, "States")
		return
	}
	for za0001, za0002 := range z.States {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "States")
			return
		}
		err = en.WriteArrayHeader(uint32(len(za0002)))
		if err != nil {
			err = msgp.WrapError(err, "States", za0001)
			return
		}
		for za0003 := range za0002 {
			err = en.WriteString(za0002[za0003])
			if err != nil {
				err = msgp.WrapError(err, "States", za0001, za0003)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Country) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 8
	// string "ID"
	o = append(o, 0x88, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt(o, z.ID)
	// string "Name"
	o = append(o, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "Iso3"
	o = append(o, 0xa4, 0x49, 0x73, 0x6f, 0x33)
	o = msgp.AppendString(o, z.Iso3)
	// string "Iso2"
	o = append(o, 0xa4, 0x49, 0x73, 0x6f, 0x32)
	o = msgp.AppendString(o, z.Iso2)
	// string "PhoneCode"
	o = append(o, 0xa9, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65)
	o = msgp.AppendString(o, z.PhoneCode)
	// string "Capital"
	o = append(o, 0xa7, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c)
	o = msgp.AppendString(o, z.Capital)
	// string "Currency"
	o = append(o, 0xa8, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79)
	o = msgp.AppendString(o, z.Currency)
	// string "States"
	o = append(o, 0xa6, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.States)))
	for za0001, za0002 := range z.States {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendArrayHeader(o, uint32(len(za0002)))
		for za0003 := range za0002 {
			o = msgp.AppendString(o, za0002[za0003])
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Country) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Iso3":
			z.Iso3, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Iso3")
				return
			}
		case "Iso2":
			z.Iso2, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Iso2")
				return
			}
		case "PhoneCode":
			z.PhoneCode, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PhoneCode")
				return
			}
		case "Capital":
			z.Capital, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Capital")
				return
			}
		case "Currency":
			z.Currency, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Currency")
				return
			}
		case "States":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "States")
				return
			}
			if z.States == nil {
				z.States = make(map[string][]string, zb0002)
			} else if len(z.States) > 0 {
				for key := range z.States {
					delete(z.States, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 []string
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "States")
					return
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "States", za0001)
					return
				}
				if cap(za0002) >= int(zb0003) {
					za0002 = (za0002)[:zb0003]
				} else {
					za0002 = make([]string, zb0003)
				}
				for za0003 := range za0002 {
					za0002[za0003], bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "States", za0001, za0003)
						return
					}
				}
				z.States[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Country) Msgsize() (s int) {
	s = 1 + 3 + msgp.IntSize + 5 + msgp.StringPrefixSize + len(z.Name) + 5 + msgp.StringPrefixSize + len(z.Iso3) + 5 + msgp.StringPrefixSize + len(z.Iso2) + 10 + msgp.StringPrefixSize + len(z.PhoneCode) + 8 + msgp.StringPrefixSize + len(z.Capital) + 9 + msgp.StringPrefixSize + len(z.Currency) + 7 + msgp.MapHeaderSize
	if z.States != nil {
		for za0001, za0002 := range z.States {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.ArrayHeaderSize
			for za0003 := range za0002 {
				s += msgp.StringPrefixSize + len(za0002[za0003])
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *GoLocator) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Countires":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Countires")
				return
			}
			if cap(z.Countires) >= int(zb0002) {
				z.Countires = (z.Countires)[:zb0002]
			} else {
				z.Countires = make([]Country, zb0002)
			}
			for za0001 := range z.Countires {
				err = z.Countires[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Countires", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *GoLocator) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Countires"
	err = en.Append(0x81, 0xa9, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Countires)))
	if err != nil {
		err = msgp.WrapError(err, "Countires")
		return
	}
	for za0001 := range z.Countires {
		err = z.Countires[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Countires", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *GoLocator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Countires"
	o = append(o, 0x81, 0xa9, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Countires)))
	for za0001 := range z.Countires {
		o, err = z.Countires[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Countires", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GoLocator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Countires":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Countires")
				return
			}
			if cap(z.Countires) >= int(zb0002) {
				z.Countires = (z.Countires)[:zb0002]
			} else {
				z.Countires = make([]Country, zb0002)
			}
			for za0001 := range z.Countires {
				bts, err = z.Countires[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Countires", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *GoLocator) Msgsize() (s int) {
	s = 1 + 10 + msgp.ArrayHeaderSize
	for za0001 := range z.Countires {
		s += z.Countires[za0001].Msgsize()
	}
	return
}
